/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package incidentUnit;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Image;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.*;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dheer
 */
public class IncidentEmployeePage extends javax.swing.JPanel {

    /**
     * Creates new form IncidentEmployeePage
     */
    JPanel rightLayout;
    String id;
    String orgName;
    String from;
    String to;
    String host;
    String sub;
    String content;
    public IncidentEmployeePage(JPanel rightLayout,String id,String orgName) {
        this.id=id;
        this.orgName=orgName;
        this.rightLayout=rightLayout;
        initComponents();
        table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        txt1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txt2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("LOGOUT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "USER ID", "INCIDENT", "INCIDENT_ID", "INDCIDENT_DATE", "INCIDENT TYPE", "STREET", "CITY", "POSTAL_CODE", "PICTURE", "STATUS", "REFERRED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jButton1.setBackground(new java.awt.Color(0, 0, 255));
        jButton1.setText("COMPLETED");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 0, 51));
        jButton2.setText("REJECT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(layout.createSequentialGroup()
                .addGap(304, 304, 304)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(157, 157, 157)
                .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(224, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
     public void table(){
        DefaultTableModel tbl = (DefaultTableModel)table.getModel();
        tbl.setRowCount(0);
              try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_EMPLOYEE";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){

           Object[] row = new Object[20];
           if(id.matches(ps.getString("ASSIGNED"))){
          row[0]=ps.getString("USERID");
          row[1]=ps.getString("INCIDENT");
          row[2]=ps.getString("INCIDENT_ID");
          row[3]=ps.getString("INCIDENT_DATE");
          row[4]=ps.getString("INCIDENT_TYPE");
          row[5]=ps.getString("STREET");
          row[6]=ps.getString("CITY");
          row[7]=ps.getString("POSTAL_CODE");
          row[8]=ps.getString("PICTURE");
          row[9]=ps.getString("STATUS");
          row[10]=ps.getString("REFERRED");
          tbl.addRow(row);
            }
            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
}
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        rightLayout.remove(this);
        Component [] componentArray = rightLayout.getComponents();
        Component c = componentArray[componentArray.length-1];
        CardLayout layout = (CardLayout) rightLayout.getLayout();
        layout.previous(rightLayout);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int selected =table.getSelectedRow();
        if(selected<0){
            JOptionPane.showMessageDialog(this, "No Row has been selected");
            return;
        }
        DefaultTableModel tbl= (DefaultTableModel)table.getModel();
        ImageIcon img = new ImageIcon(tbl.getValueAt(selected, 8).toString());
        Image img1 = img.getImage();
        Image img2 = img1.getScaledInstance(300,200,Image.SCALE_SMOOTH);
        ImageIcon icon= new ImageIcon(img2);
        txt1.setIcon(icon);

      

        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selected =table.getSelectedRow();
        int count=0;
        String msg = txt2.getText();
        if(selected<0){
            JOptionPane.showMessageDialog(this, "No Row has been selected");
            return;
        }
        DefaultTableModel tbl= (DefaultTableModel)table.getModel();
        String incidentId="";
        String status="";
        String id1= tbl.getValueAt(selected, 2).toString();
        try{
            String s1="";
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "select * from INCIDENT_EMPLOYEE";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                    incidentId= ps.getString("INCIDENT_ID");
                    s1=ps.getString("STATUS");
                    status="COMPLETED";
                }
            }
            

            if(!(s1.equalsIgnoreCase("COMPLETED"))){
               
                if(s1.matches("REJECTED")){
                                JOptionPane.showMessageDialog(this, ""+incidentId+" is Already Rejected...!!");

                }else{
                    
                    int f=0;
       try{
      Connection cn3= db_connection.DatabaseConnector.getConnection();
 
        Statement st3= cn3.createStatement();
      String sql3 = "select * from INCIDENT_EMPLOYEE";
      ResultSet ps3= st3.executeQuery(sql3);

            while(ps3.next()){
            if(ps3.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                   if(ps3.getString("STATUS").matches("FAKE") ){
                       f++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(f>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already raised for Fake Verification..!!");

       }else{
                    
                    
                 if(msg.matches("")){
                     JOptionPane.showMessageDialog(this, "Message is Mandatory..!!");
                }else{

                String sql1= "UPDATE INCIDENT SET STATUS='COMPLETED',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+incidentId+"'";
                PreparedStatement ps1= cn.prepareStatement(sql1);
                ps1.execute();

                String sql2= "UPDATE INCIDENT_MANAGER SET STATUS='COMPLETED',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+incidentId+"'";
                PreparedStatement ps2= cn.prepareStatement(sql2);
                ps2.execute();

                String sql3= "UPDATE INCIDENT_EMPLOYEE SET STATUS='COMPLETED',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+incidentId+"'";
                PreparedStatement ps3= cn.prepareStatement(sql3);
                ps3.execute();

                

                String bankName="";
                String name="";
                String email="";
                try{
                    Connection cn1= db_connection.DatabaseConnector.getConnection();

                    Statement st4= cn1.createStatement();
                    String sql4 = "SELECT * FROM USER";
                    ResultSet ps4= st4.executeQuery(sql4);

                    Statement st5= cn1.createStatement();
                    String sql5 = "SELECT * FROM INCIDENT_EMPLOYEE";
                    ResultSet ps5= st5.executeQuery(sql5);

                    while(ps5.next()){
                        while(ps4.next()){
                            if(ps5.getString("USERID").equalsIgnoreCase(ps4.getString("ID"))){
                                name= ps4.getString("NAME");
                                email=  ps4.getString("EMAIL");

                            }}}

                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this,e);
                        }

                        from ="dheerajjayanth@gmail.com";
                        to=email;
                        host="localhost";
                        sub="Your "+incidentId+" has Resolved";
                        content= "Hi "+name+",\n"
                        + "\n"
                        + "We have rectified the situation and protected the victims. Thank for your support and concern. Please encourage your neighbours to be responsible and send the incident if anything occurs around them.\n"
                        + "\n"
                        + "Thanks and Regards,\n"
                        + ""+orgName+"\n"
                        + ""+id+"\n"
                        + "\n"
                        + "If you have any concerns. Please contact us by +1 4375184224 or dheerajjayanth@gmail.com";
                        Properties p= new Properties();
                        p.put("mail.smtp.auth", "true");
                        p.put("mail.smtp.starttls.enable", "true");
                        p.put("mail.smtp.ssl.trust", "smtp.gmail.com");
                        p.put("mail.smtp.host", "smtp.gmail.com");
                        p.put("mail.smtp.port", "587");

                        Session s= Session.getDefaultInstance(p, new javax.mail.Authenticator(){
                            protected PasswordAuthentication getPasswordAuthentication(){
                                return new PasswordAuthentication("dheerajjayanth@gmail.com","rtowuvazupeivdmr");
                            }
                        });
                        try{
                            MimeMessage m = new MimeMessage(s);
                            m.setFrom(from);
                            m.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
                            m.setSubject(sub);
                            m.setText(content);
                            Transport.send(m);
                        }catch(Exception e){
                            e.printStackTrace();
                        }

                        JOptionPane.showMessageDialog(this,""+incidentId+" has Successfully Completed..!!");
                        clear();
                        table();
                    }}}}else{
                        JOptionPane.showMessageDialog(this,""+incidentId+" has Already Completed");
                        clear();

                    }

                }catch(Exception e){
                    JOptionPane.showMessageDialog(this,e);
                }

                // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                int selected =table.getSelectedRow();
                String msg = txt2.getText();
         if(selected<0){
             JOptionPane.showMessageDialog(this, "No Row has been selected");
             return;
         }
          DefaultTableModel tbl= (DefaultTableModel)table.getModel();
          String id1= tbl.getValueAt(selected, 2).toString();
        int count=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_EMPLOYEE";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("COMPLETED") ){
                       count++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(count>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already completed");

       }else{
            
            int c=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_EMPLOYEE";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("REJECTED") ){
                       c++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(c>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already Rejected..!!");

       }else{
            
            
             int f=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_EMPLOYEE";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("FAKE") ){
                       f++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(f>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already raised for Fake Verification..!!");

       }else{
            
        if(msg.matches("")){
                     JOptionPane.showMessageDialog(this, "Message is Mandatory..!!");
                }else{    
            
        
            String userId="";
                String name="";
                String email="";
            try{
                
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_EMPLOYEE";
      ResultSet ps= st.executeQuery(sql);
      
      
       Statement st2= cn.createStatement();
      String sql2 = "select * from USER";
      ResultSet ps2= st2.executeQuery(sql2);
      
            while(ps.next()){
            if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
           userId=ps.getString("USERID");
            while(ps2.next()){
           if(userId.equalsIgnoreCase(ps2.getString("ID"))){
               email=ps2.getString("EMAIL");
               name=ps2.getString("NAME");
           }
           }
           
            }}
            }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
            
            
            
            try{
                
                Connection cn1=  db_connection.DatabaseConnector.getConnection();
                       String sql2= "UPDATE INCIDENT_MANAGER SET STATUS='FAKE',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+id1+"'";
                PreparedStatement ps2= cn1.prepareStatement(sql2);
                ps2.execute();

                String sql3= "UPDATE INCIDENT_EMPLOYEE SET STATUS='FAKE',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+id1+"'";
                PreparedStatement ps3= cn1.prepareStatement(sql3);
                ps3.execute();
                        
                        
                        JOptionPane.showMessageDialog(this,""+id1+" has been Rejected Successfully");
                        clear();
                        table();
            }catch(Exception e){
                        JOptionPane.showMessageDialog(this,e);
                    }
        
        
        }

        }}
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    public void clear(){
        txt1.setIcon(null);
        txt2.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JLabel txt1;
    private javax.swing.JTextField txt2;
    // End of variables declaration//GEN-END:variables
}
