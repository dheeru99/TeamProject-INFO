/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package taxUnit;

import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dheer
 */
public class TaxOfficer extends javax.swing.JPanel {

    /**
     * Creates new form TaxOfficer
     */
    JPanel rightLayout;
    String id;
     String from;
    String to;
    String host;
    String sub;
    String content;
    public TaxOfficer(JPanel rightLayout, String id) {
        this.rightLayout=rightLayout;
        this.id=id;
        initComponents();
        table();
        box();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txt = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "USER ID", "PAYER_NAME", "TAX_ID", "SIN", "ACCOUNT NUMBER", "START_DURATION", "END_DURATION", "ANNUAL_INCOME", "TAXES_PAID", "STATUS", "REFERRED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("REJECT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("LOGOUT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton4.setBackground(new java.awt.Color(51, 51, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("SEND");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111)
                .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 527, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(499, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        rightLayout.remove(this);
        Component [] componentArray = rightLayout.getComponents();
        Component c = componentArray[componentArray.length-1];
        CardLayout layout = (CardLayout) rightLayout.getLayout();
        layout.previous(rightLayout);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         int selected =table.getSelectedRow();
         String empSelected= String.valueOf(txt.getSelectedItem());
         if(selected<0){
             JOptionPane.showMessageDialog(this, "No Row has been selected");
             return;
         }
          DefaultTableModel tbl= (DefaultTableModel)table.getModel();
          String id1= tbl.getValueAt(selected, 2).toString();
          String userId="";
          String claimName="";
          String taxId="";
          String sin="";
          String account="";
          String start="";
          String end="";
          String income="";
          String paid="";
          String status="";
          String ref="";
           try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
           userId=ps.getString("USERID");
           claimName=ps.getString("CLAIM_NAME");
           taxId=ps.getString("TAX_ID");
           sin=ps.getString("SIN");
           account=ps.getString("ACCOUNT_NUMBER");
           start=ps.getString("START_DURATION");
           end=ps.getString("END_DURATION");
           income=ps.getString("ANNUAL_INCOME");
           paid=ps.getString("TAXES_PAID");
           status="SENT TO FINAL PROCESS";
           ref= ps.getString("REFERRED");
            }
                 }

       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
      int count=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("SENT TO FINAL PROCESS")){
                       count++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
       
       int r=0;
        try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("REJECTED")){
                       r++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
       if(r>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already Rejected..!!");

       }else{
           
           
           try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("APPROVED")){
                       r++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
       if(r>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already Approved..!!");

       }else{
           
       
       if(count>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already sent to TAX_OFFICER");

       }else{
                            int x=0;
                        try{
                  Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st= cn.createStatement();
                  String sql = "select * from TAX_EMPLOYEE";
                  ResultSet ps= st.executeQuery(sql);
                  while(ps.next()){
                      if(ps.getString("ASSIGNED").matches(empSelected)){
                          if(ps.getString("STATUS").matches("SENT TO FINAL PROCESS")){
                              x++;
                          }
                      }
                  }

                       }catch(Exception e){
                      JOptionPane.showMessageDialog(this,e);
                  }
           if(x>0){
                JOptionPane.showMessageDialog(this,""+empSelected+" is Already working on previous Application.");
           }else{
                        
           
               
               
           try{
                Connection cn=  db_connection.DatabaseConnector.getConnection();
                String sql = "INSERT INTO TAX_EMPLOYEE(USERID,CLAIM_NAME,TAX_ID, SIN,ACCOUNT_NUMBER,START_DURATION,END_DURATION,ANNUAL_INCOME,TAXES_PAID,STATUS,REFERRED,ASSIGNED) values(?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps= cn.prepareStatement(sql);
                ps.setString(1,userId);
                ps.setString(2,claimName);
                ps.setString(3,taxId);
                ps.setString(4,sin);
                ps.setString(5,account);
                ps.setString(6,start);
                ps.setString(7, end);
                ps.setString(8,income);
                ps.setString(9,paid);
                ps.setString(10, status);
                ps.setString(11,id);
                ps.setString(12,empSelected);
                ps.execute();
                
                try{
            Connection cn1=  db_connection.DatabaseConnector.getConnection();    
            String sql1= "UPDATE TAXES SET STATUS='"+status+"' WHERE TAX_ID='"+id1+"'";
            PreparedStatement ps1= cn1.prepareStatement(sql1);
             ps1.execute();
             
             
             String sql2= "UPDATE TAX_OFFICER SET STATUS='"+status+"' WHERE TAX_ID='"+id1+"'";
            PreparedStatement ps2= cn1.prepareStatement(sql2);
             ps2.execute();
       
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
                
                JOptionPane.showMessageDialog(this,""+id1+" has successfully sent to TAX_OFFICER..!!");
                table();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
       }}}
    }




        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         int selected =table.getSelectedRow();
         if(selected<0){
             JOptionPane.showMessageDialog(this, "No Row has been selected");
             return;
         }
          DefaultTableModel tbl= (DefaultTableModel)table.getModel();
          String id1= tbl.getValueAt(selected, 2).toString();
        int count=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("SENT TO FINAL PROCESS") ){
                       count++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(count>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already sent to TAX_OFFICER");

       }else{
            
            int c=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("REJECTED") ){
                       c++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(c>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already Rejected..!!");

       }else{
            String userId="";
                String name="";
                String email="";
            try{
                
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);
      
      
       Statement st2= cn.createStatement();
      String sql2 = "select * from USER";
      ResultSet ps2= st2.executeQuery(sql2);
      
            while(ps.next()){
            if(ps.getString("TAX_ID").equalsIgnoreCase(id1)){
           userId=ps.getString("USERID");
            while(ps2.next()){
           if(userId.equalsIgnoreCase(ps2.getString("ID"))){
               email=ps2.getString("EMAIL");
               name=ps2.getString("NAME");
           }
           }
           
            }}
            }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
            
            
            
            try{
                
                Connection cn1=  db_connection.DatabaseConnector.getConnection();
                        String sql1=  "UPDATE TAXES SET STATUS='REJECTED' WHERE TAX_ID='"+id1+"'";
                        PreparedStatement ps1= cn1.prepareStatement(sql1);
                        ps1.execute();
                        table();
                        
                        
                        String sql2=  "UPDATE TAX_OFFICER SET STATUS='REJECTED' WHERE TAX_ID='"+id1+"'";
                        PreparedStatement ps2= cn1.prepareStatement(sql2);
                        ps2.execute();
                        table();
                        
             from ="dheerajjayanth@gmail.com";
             to=email;
             host="localhost";
             sub="Sorry Your claim got Rejected..!!. ";
             content= "Hi "+name+",\n"
                     + "\n"
                     + "We have Rejected your "+id1+" application. Can you please contact the TAX company website for more information.\n"
                     + "\n"
                     + "Thanks and Regards,\n"
                     + "TAX_OFFICER \n"
                     + ""+id+"\n"
                     + "\n"
                     + "If you have any concerns. Please contact us by +1 4375184224 or dheerajjayanth@gmail.com";
             Properties p= new Properties();
             p.put("mail.smtp.auth", "true");
             p.put("mail.smtp.starttls.enable", "true");
             p.put("mail.smtp.ssl.trust", "smtp.gmail.com");
             p.put("mail.smtp.host", "smtp.gmail.com");
             p.put("mail.smtp.port", "587");
             
             Session s= Session.getDefaultInstance(p, new javax.mail.Authenticator(){
                protected PasswordAuthentication getPasswordAuthentication(){
                    return new PasswordAuthentication("dheerajjayanth@gmail.com","rtowuvazupeivdmr");
                } 
             });
             try{
                 MimeMessage m = new MimeMessage(s);
                 m.setFrom(from);
                 m.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
                 m.setSubject(sub);
                 m.setText(content);
                 Transport.send(m);
             }catch(Exception e){
                 e.printStackTrace();
             }
                        
                        
                        
                        
                        JOptionPane.showMessageDialog(this,""+id1+" has been Rejected Successfully");
                        
            }catch(Exception e){
                        JOptionPane.showMessageDialog(this,e);
                    }
        
        
        }


        }






        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
     public void table(){
        DefaultTableModel tbl = (DefaultTableModel)table.getModel();
        tbl.setRowCount(0);
              try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
      
       
     
        Statement st= cn.createStatement();
      String sql = "select * from TAX_OFFICER";
      ResultSet ps= st.executeQuery(sql);
      

      
          while(ps.next()){
           
           Object[] row = new Object[20];
          row[0]=ps.getString("USERID");
          row[1]=ps.getString("CLAIM_NAME");
          row[2]=ps.getString("TAX_ID");
          row[3]=ps.getString("SIN");
          row[4]=ps.getString("ACCOUNT_NUMBER");
          row[5]=ps.getString("START_DURATION");
          row[6]=ps.getString("END_DURATION");
          row[7]=ps.getString("ANNUAL_INCOME");
          row[8]=ps.getString("TAXES_PAID");
          row[9]=ps.getString("STATUS");
          row[10]=ps.getString("REFERRED");
          tbl.addRow(row);
         
          }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
    }
     public void box(){
          txt.removeAllItems(); 
          try{
      Connection cn= db_connection.DatabaseConnector.getConnection(); 
      
     Statement st= cn.createStatement();
      String sql = "SELECT * FROM TAX_EMPLOYEE_LOGIN";
      ResultSet ps= st.executeQuery(sql);
      
       while(ps.next()){
      
       txt.addItem(ps.getString("EMPLOYEEID"));
        }
      }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> txt;
    // End of variables declaration//GEN-END:variables
}
