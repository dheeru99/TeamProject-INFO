/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package bankUnit;

import attributes.UserDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;

/**
 *
 * @author dheer
 */
public class BankManagerPage extends javax.swing.JPanel {

    /**
     * Creates new form BankManagerPage
     */
    JPanel bankLayout;
    UserDirectory userDirectory;
     String from;
    String to;
    String host;
    String sub;
    String content;
    String id;
    public BankManagerPage(JPanel bankLayout,UserDirectory userDirectory, String id) {
        this.bankLayout=bankLayout;
        this.userDirectory=userDirectory;
        this.id=id;
        initComponents();
        table();
        box();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txt1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1920, 1080));
        setLayout(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "USER_ID", "BANK_ID", "BANK_NAME", "TYPE", "ACCOUNT_NUMBER", "SIN", "PHONENUMBER", "AMOUNT", "STATUS", "REFERRED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 43, 1920, 187);

        jButton1.setBackground(new java.awt.Color(0, 0, 255));
        jButton1.setText("SEND");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(470, 240, 106, 38);

        jButton2.setBackground(new java.awt.Color(255, 51, 51));
        jButton2.setText("REJECT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(0, 240, 106, 38);

        txt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt1ActionPerformed(evt);
            }
        });
        add(txt1);
        txt1.setBounds(200, 240, 253, 40);

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("LOGOUT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(1800, 0, 96, 38);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/6395a9817591e.png"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1980, 1080);
    }// </editor-fold>//GEN-END:initComponents
    
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseClicked
    public void box(){
         txt1.removeAllItems();  
         String bankName1="";
        try{
      Connection cn= db_connection.DatabaseConnector.getConnection(); 
      
     Statement st= cn.createStatement();
      String sql = "SELECT * FROM BANK_EMPLOYEE_LOGIN";
      ResultSet ps= st.executeQuery(sql);
      

      Connection cn2= db_connection.DatabaseConnector.getConnection(); 
       Statement st2= cn2.createStatement();
      String sql2 = "select * from BANK_MANAGER_LOGIN";
      ResultSet ps2= st2.executeQuery(sql2);
        while(ps2.next()){
       if(ps2.getString("MANAGERID").equalsIgnoreCase(id)){
          bankName1=ps2.getString("BANK_NAME");
      }
        }
      
       while(ps.next()){
       if(ps.getString("BANK_NAME").equalsIgnoreCase(bankName1)){
       txt1.addItem(ps.getString("EMPLOYEEID"));
       }
        }
      }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
    
    }
    public void table(){
        DefaultTableModel tbl = (DefaultTableModel)table.getModel();
        tbl.setRowCount(0);
        String bankName="";
              try{
      Connection cn= db_connection.DatabaseConnector.getConnection();

        Statement st= cn.createStatement();
      String sql = "select * from BANK_MANAGER";
      ResultSet ps= st.executeQuery(sql);


      
      Statement st2= cn.createStatement();
      String sql2 = "select * from BANK_MANAGER_LOGIN";
      ResultSet ps2= st2.executeQuery(sql2);
        while(ps2.next()){
      if(ps2.getString("MANAGERID").equalsIgnoreCase(id)){
          bankName=ps2.getString("BANK_NAME");
      }
        }
      
      
          while(ps.next()){
          if(ps.getString("BANK_NAME").equalsIgnoreCase(bankName)){
          Object[] row = new Object[20];     
          row[0]=ps.getString("USERID");
          row[1]=ps.getString("BANK_ID");
          row[2]=ps.getString("BANK_NAME");
          row[3]=ps.getString("TYPE");
          row[4]=ps.getString("ACCOUNT_NUMBER");
          row[5]=ps.getString("SIN");
          row[6]=ps.getString("PHONE");
          row[7]=ps.getString("AMOUNT");
          row[8]=ps.getString("STATUS");
          row[9]=ps.getString("REFERRED");
          tbl.addRow(row);
                }
            }

       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          String selectedEmp= String.valueOf(txt1.getSelectedItem());
           int selected =table.getSelectedRow();
         if(selected<0){
             JOptionPane.showMessageDialog(this, "No Row has been selected");
             return;
         }
                    DefaultTableModel tbl= (DefaultTableModel)table.getModel();
          String id1= tbl.getValueAt(selected, 1).toString();
          int x=0;
       try{
        
         
           String s="";
            Connection cn2= db_connection.DatabaseConnector.getConnection();

             Statement st2= cn2.createStatement();
      String sql2 = "select * from BANK_MANAGER";
      ResultSet ps2= st2.executeQuery(sql2);
      while(ps2.next()){
            if(ps2.getString("BANK_ID").equalsIgnoreCase(id1)){
                if(ps2.getString("STATUS").matches("SENT TO REVIEW FOR FINAL PROCESS")){
                    x++;
                }
            }
      }
      
      }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }

      int r=0;
         
         
         try{
                  Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st= cn.createStatement();
                  String sql = "select * from BANK_MANAGER";
                  ResultSet ps= st.executeQuery(sql);
                  while(ps.next()){
                      if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                if(ps.getString("STATUS").matches("REJECTED")){
                    r++;
                }
            }
                  }

                       }catch(Exception e){
                      JOptionPane.showMessageDialog(this,e);
                  }
      
      if(r>0){
            
                  JOptionPane.showMessageDialog(this, ""+id1+" is Already Rejected");
            }else{
    
          
          int a=0;
        
         
          try{
                  Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st= cn.createStatement();
                  String sql = "select * from BANK_MANAGER";
                  ResultSet ps= st.executeQuery(sql);
                  while(ps.next()){
                      if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                if(ps.getString("STATUS").matches("APPROVED")){
                    a++;
                }
            }
                  }

                       }catch(Exception e){
                      JOptionPane.showMessageDialog(this,e);
                  }
         
         
         
         
      
      if(a>0){
            
                  JOptionPane.showMessageDialog(this, ""+id1+" is Already Approved");
            }else{
          
      
           
           int count=0;
                        try{
                  Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st= cn.createStatement();
                  String sql = "select * from BANK_EMPLOYEE";
                  ResultSet ps= st.executeQuery(sql);
                  while(ps.next()){
                      if(ps.getString("ASSIGNED").matches(selectedEmp)){
                          if(ps.getString("STATUS").matches("SENT TO REVIEW FOR FINAL PROCESS")){
                              count++;
                          }
                      }
                  }

                       }catch(Exception e){
                      JOptionPane.showMessageDialog(this,e);
                  }
           if(count>0){
                JOptionPane.showMessageDialog(this,""+selectedEmp+" is Already working on previous Application.");
           }else{
          
          
          
            if(x>0){
            
                  JOptionPane.showMessageDialog(this, ""+id1+" is Already sent for Final Process");
            }else{
               

          String userId="";
          String bankId="";
          String bankName="";
          String type="";
          String accountNumber="";
          String sin="";
          String phone="";
          String amount="";
          String status="";
          
                        try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from BANK_MANAGER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
           userId=ps.getString("USERID");
           bankId=ps.getString("BANK_ID");
           bankName=ps.getString("BANK_NAME");
           type=ps.getString("TYPE");
           accountNumber=ps.getString("ACCOUNT_NUMBER");
           sin=ps.getString("SIN");
           phone=ps.getString("PHONE");
           amount=ps.getString("AMOUNT");
           status="SENT TO REVIEW FOR FINAL PROCESS";
            }
                 }

       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
                        
      
                        
       int c=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from BANK_EMPLOYEE";
      ResultSet ps= st.executeQuery(sql);
      
      
         

            while(ps.next()){
            if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                   c++;
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(c>0){
                      JOptionPane.showMessageDialog(this,""+bankId+" is Already sent to Banking_Unit");

        }else{                
    
       try{
        Connection cn=  db_connection.DatabaseConnector.getConnection();
            String sql = "INSERT INTO BANK_EMPLOYEE(USERID,BANK_ID,BANK_NAME,TYPE,ACCOUNT_NUMBER,SIN,PHONE,AMOUNT,STATUS,REFERRED,ASSIGNED) values(?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps= cn.prepareStatement(sql);
            ps.setString(1,userId);
            ps.setString(2,bankId);
            ps.setString(3,bankName);
            ps.setString(4,type);
            ps.setString(5,accountNumber);
            ps.setString(6, sin);
            ps.setString(7,phone);
            ps.setString(8,amount);
            ps.setString(9,status);
            ps.setString(10, id);
            ps.setString(11,selectedEmp);
            ps.execute();
            
             try{
            Connection cn1=  db_connection.DatabaseConnector.getConnection();    
            String sql1= "UPDATE BANK_MANAGER SET STATUS='"+status+"' WHERE BANK_ID='"+id1+"'";
            PreparedStatement ps1= cn1.prepareStatement(sql1);
             ps1.execute();
             
             
             String sql5= "UPDATE BANK SET STATUS='"+status+"' WHERE BANK_ID='"+id1+"'";
            PreparedStatement ps5= cn1.prepareStatement(sql5);
             ps5.execute();
             table();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
            
            JOptionPane.showMessageDialog(this,""+bankId+" is Sent to Banking Unit Successfully..!!");
   
            
        }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }                  
                        
                        
            }}}}}
        
        
        
        
        
       
          
    
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
        
        int selected =table.getSelectedRow();
        String email="";
        String bankName="";
        String name="";
        if(selected<0){
            JOptionPane.showMessageDialog(this, "No Row has been selected");
            return;
        }
        DefaultTableModel tbl= (DefaultTableModel)table.getModel();

        String id1= tbl.getValueAt(selected, 1).toString();
        
        int a=0;
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "SELECT * FROM BANK_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                    if((ps.getString("STATUS").equalsIgnoreCase("APPROVED"))){

                        a++;
                    }
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }

        if(a>0){
            JOptionPane.showMessageDialog(this,""+id1+" is Already Approved");
        }else{
        
        
        
        int r=0;
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "SELECT * FROM BANK_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                    if((ps.getString("STATUS").equalsIgnoreCase("REJECTED"))){

                        r++;
                    }
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }

        if(r>0){
            JOptionPane.showMessageDialog(this,""+id1+" is Already Rejected");
        }else{
        
        
        int count=0;
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "SELECT * FROM BANK_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                    if((ps.getString("STATUS").equalsIgnoreCase("SENT TO REVIEW FOR FINAL PROCESS"))){

                        count++;
                    }
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }

        if(count>0){
            JOptionPane.showMessageDialog(this,""+id1+" is unable delete because it is sent Banking Unit");
        }else{

            try{

                try{
                    Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st3= cn.createStatement();
                    String sql3 = "SELECT * FROM USER";
                    ResultSet ps3= st3.executeQuery(sql3);

                    Statement st= cn.createStatement();
                    String sql = "SELECT * FROM BANK_MANAGER";
                    ResultSet ps= st.executeQuery(sql);

                    while(ps.next()){
                        if(ps.getString("BANK_ID").equalsIgnoreCase(id1)){
                            bankName=ps.getString("BANK_NAME");
                            while(ps3.next()){
                                if(ps.getString("USERID").equalsIgnoreCase(ps3.getString("ID"))){
                                    name= ps3.getString("NAME");
                                    email=  ps3.getString("EMAIL");

                                }}}
                            }
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this,e);
                        }

                        from ="dheerajjayanth@gmail.com";
                        to=email;
                        host="localhost";
                        sub="Sorry Your Account not Accepted for "+bankName+" Bank";
                        content= "Hi "+name+",\n"
                        + "\n"
                        + "We have Rejected your application due to your Banking History. Can you please contact the bank for more information.\n"
                        + "\n"
                        + "Thanks and Regards,\n"
                        + ""+bankName+"\n"
                        + ""+id+"\n"
                        + "\n"
                        + "If you have any concerns. Please contact us by +1 4375184224 or dheerajjayanth@gmail.com";
                        Properties p= new Properties();
                        p.put("mail.smtp.auth", "true");
                        p.put("mail.smtp.starttls.enable", "true");
                        p.put("mail.smtp.ssl.trust", "smtp.gmail.com");
                        p.put("mail.smtp.host", "smtp.gmail.com");
                        p.put("mail.smtp.port", "587");

                        Session s= Session.getDefaultInstance(p, new javax.mail.Authenticator(){
                            protected PasswordAuthentication getPasswordAuthentication(){
                                return new PasswordAuthentication("dheerajjayanth@gmail.com","rtowuvazupeivdmr");
                            }
                        });
                        try{
                            MimeMessage m = new MimeMessage(s);
                            m.setFrom(from);
                            m.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
                            m.setSubject(sub);
                            m.setText(content);
                            Transport.send(m);
                        }catch(Exception e){
                            e.printStackTrace();
                        }

                        Connection cn1=  db_connection.DatabaseConnector.getConnection();
                        String sql1= "UPDATE BANK SET STATUS='REJECTED' WHERE BANK_ID='"+id1+"'";
                        PreparedStatement ps1= cn1.prepareStatement(sql1);
                        ps1.execute();
                        
                        
                        
                       String sql2= "UPDATE BANK_MANAGER SET STATUS='REJECTED' WHERE BANK_ID='"+id1+"'";
                        PreparedStatement ps2= cn1.prepareStatement(sql2);
                        ps2.execute();
                        
                        table();
                        box();
                                                JOptionPane.showMessageDialog(this,""+id1+" has been Rejected Successfully...!!!");


                    }catch(Exception e){
                        JOptionPane.showMessageDialog(this,e);
                    }
                }}}

                // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt1ActionPerformed
        


        // TODO add your handling code here:
    }//GEN-LAST:event_txt1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        bankLayout.remove(this);
        Component [] componentArray = bankLayout.getComponents();
        Component c = componentArray[componentArray.length-1];
        CardLayout layout = (CardLayout) bankLayout.getLayout();
        layout.previous(bankLayout);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> txt1;
    // End of variables declaration//GEN-END:variables
}
