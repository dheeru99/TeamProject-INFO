/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package incidentUnit;

import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.awt.Image;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dheer
 */
public class IncidentOfficerPage extends javax.swing.JPanel {

    /**
     * Creates new form IncidentOfficerPage
     */
    JPanel rightLayout;
    String id;
    String orgName;
    String from;
    String to;
    String host;
    String sub;
    String content;
    public IncidentOfficerPage(JPanel rightLayout,String id,String orgName) {
        this.rightLayout=rightLayout;
        this.id=id;
        this.orgName=orgName;
        initComponents();
        box();
        table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txt1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txt3 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        txt4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "USER ID", "INCIDENT", "INCIDENT_ID", "INDCIDENT_DATE", "INCIDENT TYPE", "STREET", "CITY", "POSTAL_CODE", "PICTURE", "STATUS", "REFERRED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 48, 1920, 210);
        add(txt1);
        txt1.setBounds(380, 370, 300, 300);

        jButton1.setBackground(new java.awt.Color(51, 51, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("SEND");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(640, 270, 117, 46);

        txt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt3ActionPerformed(evt);
            }
        });
        add(txt3);
        txt3.setBounds(380, 270, 253, 46);

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("LOGOUT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(1760, 0, 96, 42);

        txt2.setColumns(20);
        txt2.setRows(5);
        jScrollPane2.setViewportView(txt2);

        add(jScrollPane2);
        jScrollPane2.setBounds(770, 270, 266, 60);

        jButton2.setBackground(new java.awt.Color(255, 0, 51));
        jButton2.setText("REJECT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(250, 330, 106, 38);

        txt4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt4ActionPerformed(evt);
            }
        });
        add(txt4);
        txt4.setBounds(150, 270, 206, 47);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("FINE AMOUNT");
        add(jLabel1);
        jLabel1.setBounds(20, 270, 94, 40);

        jLabel5.setText(":");
        add(jLabel5);
        jLabel5.setBounds(120, 270, 22, 40);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/emergency-team-flat-style_23-2147947384.png"))); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(0, 0, 1980, 1080);
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int selected =table.getSelectedRow();
        if(selected<0){
            JOptionPane.showMessageDialog(this, "No Row has been selected");
            return;
        }
        DefaultTableModel tbl= (DefaultTableModel)table.getModel();
        ImageIcon img = new ImageIcon(tbl.getValueAt(selected, 8).toString());
        Image img1 = img.getImage();
        Image img2 = img1.getScaledInstance(300,200,Image.SCALE_SMOOTH);
        ImageIcon icon= new ImageIcon(img2);
        txt1.setIcon(icon);



        String id1=tbl.getValueAt(selected, 2).toString();
        String msg="";
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "select * from INCIDENT_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(id1.matches(ps.getString("INCIDENT_ID"))){
                    msg=ps.getString("MESSAGE");
                }
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }

        txt2.setText(msg);
        txt2.setEditable(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selected =table.getSelectedRow();
        String selectedEmp= String.valueOf(txt3.getSelectedItem());
        if(selected<0){
            JOptionPane.showMessageDialog(this, "No Row has been selected");
            return;
        }
        DefaultTableModel tbl= (DefaultTableModel)table.getModel();
        String userId="";
        String incident="";
        String incidentId="";
        String date="";
        String type="";
        String street="";
        String city="";
        String postalCode="";
        String picture="";
        String status="";
        String ref="";
        String id1= tbl.getValueAt(selected, 2).toString();
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "select * from INCIDENT_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                    userId=ps.getString("USERID");
                    incident=ps.getString("INCIDENT");
                    incidentId=ps.getString("INCIDENT_ID");
                    date=ps.getString("INCIDENT_DATE");
                    type=ps.getString("INCIDENT_TYPE");
                    street=ps.getString("STREET");
                    city=ps.getString("CITY");
                    postalCode=ps.getString("POSTAL_CODE");
                    picture=ps.getString("PICTURE");
                    ref=ps.getString("REFERRED");
                    status="SENT TO INCIDENT_EMPLOYEE";
                }
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }

        int r=0;
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "select * from INCIDENT_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                    if(ps.getString("STATUS").matches("SENT TO INCIDENT_EMPLOYEE")){
                        r++;
                    }
                }

            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
        if(r>0){
            JOptionPane.showMessageDialog(this,""+incidentId+" is Already sent to Incident Employee");

        }else{

            int b=0;
            try{
                Connection cn= db_connection.DatabaseConnector.getConnection();

                Statement st= cn.createStatement();
                String sql = "select * from INCIDENT_MANAGER";
                ResultSet ps= st.executeQuery(sql);

                while(ps.next()){
                    if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                        if(ps.getString("STATUS").matches("REJECTED")){
                            b++;
                        }
                    }

                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
            if(b>0){
                JOptionPane.showMessageDialog(this,""+incidentId+" is Already Rejected");

            }else{

                int a=0;
                try{
                    Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st= cn.createStatement();
                    String sql = "select * from INCIDENT_MANAGER";
                    ResultSet ps= st.executeQuery(sql);

                    while(ps.next()){
                        if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                            if(ps.getString("STATUS").matches("COMPLETED")){
                                a++;
                            }
                        }

                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(this,e);
                }
                if(a>0){
                    JOptionPane.showMessageDialog(this,""+incidentId+" is Already Completed");

                }else{
                        
                    
                    
                    int count=0;
                        try{
                  Connection cn= db_connection.DatabaseConnector.getConnection();

                    Statement st= cn.createStatement();
                  String sql = "select * from INCIDENT_EMPLOYEE";
                  ResultSet ps= st.executeQuery(sql);
                  while(ps.next()){
                      if(ps.getString("ASSIGNED").matches(selectedEmp)){
                          if(ps.getString("STATUS").matches("SENT TO INCIDENT_EMPLOYEE")){
                              count++;
                          }
                      }
                  }

                       }catch(Exception e){
                      JOptionPane.showMessageDialog(this,e);
                  }
           if(count>0){
                JOptionPane.showMessageDialog(this,""+selectedEmp+" is Already working on previous Application.");
           }else{
               
               
               
               int f=0;
       try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_MANAGER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
            if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                   if(ps.getString("STATUS").matches("FAKE") ){
                       f++;
                   }
                 }

            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
        if(f>0){
                     JOptionPane.showMessageDialog(this,""+id1+" is Already raised for Fake Verification..!!");

       }else{
                    

                        try{
                            Connection cn=  db_connection.DatabaseConnector.getConnection();
                            String sql = "INSERT INTO INCIDENT_EMPLOYEE(USERID,INCIDENT,INCIDENT_ID,INCIDENT_DATE,INCIDENT_TYPE,STREET,CITY,POSTAL_CODE,PICTURE,STATUS,REFERRED,ASSIGNED) values(?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement ps= cn.prepareStatement(sql);
                            ps.setString(1,userId);
                            ps.setString(2,incident);
                            ps.setString(3,incidentId);
                            ps.setString(4,date);
                            ps.setString(5, type);
                            ps.setString(6,street);
                            ps.setString(7, city);
                            ps.setString(8,postalCode);
                            ps.setString(9,picture);
                            ps.setString(10, status);
                            ps.setString(11, ref);
                            ps.setString(12, selectedEmp);
                            ps.execute();

                            try{
                                Connection cn1=  db_connection.DatabaseConnector.getConnection();
                                String sql1= "UPDATE INCIDENT_MANAGER SET STATUS='"+status+"' WHERE INCIDENT_ID='"+id1+"'";
                                PreparedStatement ps1= cn1.prepareStatement(sql1);
                                ps1.execute();
                                
                                String sql2= "UPDATE INCIDENT SET STATUS='"+status+"' WHERE INCIDENT_ID='"+id1+"'";
                                PreparedStatement ps2= cn1.prepareStatement(sql2);
                                ps1.execute();
                                
                                
                                table();
                            }catch(Exception e){
                                JOptionPane.showMessageDialog(this,e);
                            }

                            JOptionPane.showMessageDialog(this,""+incidentId+" is Sent to Banking Unit Successfully..!!");
                            clear();

                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this,e);
                        }
                    
                }}}}}
                // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt3ActionPerformed
                    
        // TODO add your handling code here:
    }//GEN-LAST:event_txt3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        rightLayout.remove(this);
        Component [] componentArray = rightLayout.getComponents();
        Component c = componentArray[componentArray.length-1];
        CardLayout layout = (CardLayout) rightLayout.getLayout();
        layout.previous(rightLayout);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selected =table.getSelectedRow();
        String fine= txt4.getText();
        String msg = txt2.getText();
        if(selected<0){
            JOptionPane.showMessageDialog(this, "No Row has been selected");
            return;
        }
        DefaultTableModel tbl= (DefaultTableModel)table.getModel();
        String id1= tbl.getValueAt(selected, 2).toString();
        int count=0;
        try{
            Connection cn= db_connection.DatabaseConnector.getConnection();

            Statement st= cn.createStatement();
            String sql = "select * from INCIDENT_MANAGER";
            ResultSet ps= st.executeQuery(sql);

            while(ps.next()){
                if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                    if(ps.getString("STATUS").matches("COMPLETED") ){
                        count++;
                    }
                }

            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
        if(count>0){
            JOptionPane.showMessageDialog(this,""+id1+" is Already completed");

        }else{

            int c=0;
            try{
                Connection cn= db_connection.DatabaseConnector.getConnection();

                Statement st= cn.createStatement();
                String sql = "select * from INCIDENT_MANAGER";
                ResultSet ps= st.executeQuery(sql);

                while(ps.next()){
                    if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                        if(ps.getString("STATUS").matches("REJECTED") ){
                            c++;
                        }
                    }

                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
            if(c>0){
                JOptionPane.showMessageDialog(this,""+id1+" is Already Rejected..!!");

            }else{
                    
                
                int b=0;
            try{
                Connection cn= db_connection.DatabaseConnector.getConnection();

                Statement st= cn.createStatement();
                String sql = "select * from INCIDENT_MANAGER";
                ResultSet ps= st.executeQuery(sql);

                while(ps.next()){
                    if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                        if(ps.getString("STATUS").matches("SENT TO INCIDENT_EMPLOYEE") ){
                            b++;
                        }
                    }

                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
            if(b>0){
                JOptionPane.showMessageDialog(this,""+id1+" is Already sent to Incident Employee..!!");

            }else{
                
                
                
                int d=0;
            try{
                Connection cn= db_connection.DatabaseConnector.getConnection();

                Statement st= cn.createStatement();
                String sql = "select * from INCIDENT_MANAGER";
                ResultSet ps= st.executeQuery(sql);

                while(ps.next()){
                    if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                        if(ps.getString("STATUS").matches("SENT TO INCIDENT_MANAGER") ){
                            d++;
                        }
                    }

                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
            if(d>0){
                JOptionPane.showMessageDialog(this,""+id1+" is not sent for Verification. Please verify the Incident before Rejecting");

            }else{
                
                if(fine.matches("")){
                    JOptionPane.showMessageDialog(this,"Fine Amount is Mandatory");
                }else if(!fine.matches("[0-9]+")){
                    JOptionPane.showMessageDialog(this,"Fine Amount should be Numeric");
                }else{

                    String userId="";
                    String name="";
                    String email="";
                    try{

                        Connection cn= db_connection.DatabaseConnector.getConnection();

                        Statement st= cn.createStatement();
                        String sql = "select * from INCIDENT_MANAGER";
                        ResultSet ps= st.executeQuery(sql);

                        Statement st2= cn.createStatement();
                        String sql2 = "select * from USER";
                        ResultSet ps2= st2.executeQuery(sql2);

                        while(ps.next()){
                            if(ps.getString("INCIDENT_ID").equalsIgnoreCase(id1)){
                                userId=ps.getString("USERID");
                                while(ps2.next()){
                                    if(userId.equalsIgnoreCase(ps2.getString("ID"))){
                                        email=ps2.getString("EMAIL");
                                        name=ps2.getString("NAME");
                                    }
                                }

                            }}
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this,e);
                        }

                        try{

                            Connection cn1=  db_connection.DatabaseConnector.getConnection();

                            String sql3= "UPDATE INCIDENT SET STATUS='REJECTED',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+id1+"'";
                            PreparedStatement ps3= cn1.prepareStatement(sql3);
                            ps3.execute();
                            
                            String sql4= "UPDATE INCIDENT_MANAGER SET STATUS='REJECTED',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+id1+"'";
                            PreparedStatement ps4= cn1.prepareStatement(sql4);
                            ps4.execute();
                            
                            
                            String sql5= "UPDATE INCIDENT_EMPLOYEE SET STATUS='REJECTED',MESSAGE='"+msg+"' WHERE INCIDENT_ID='"+id1+"'";
                            PreparedStatement ps5= cn1.prepareStatement(sql5);
                            ps5.execute();
                            
                            try{
                            Connection cn=  db_connection.DatabaseConnector.getConnection();
                            String sql = "INSERT INTO FINE(USERID,INCIDENT_ID,FINE_AMOUNT,REASON) values(?,?,?,?)";
                            PreparedStatement ps= cn.prepareStatement(sql);
                            ps.setString(1,userId);
                            ps.setString(2,id1);
                            ps.setString(3,fine);
                            ps.setString(4,msg);
                          
                            ps.execute();

                            
                            }catch(Exception e){
                                JOptionPane.showMessageDialog(this,e);
                            }
                            
                            
                            
                            
                             from ="dheerajjayanth@gmail.com";
                        to=email;
                        host="localhost";
                        sub="Your "+id1+" has Rejected";
                        content= "Hi "+name+",\n"
                        + "\n"
                        + "We have searched for the victims in the incident area the situation. We didn't find any disturbance or break happened in this area. So, Due to inappropriate report we are raising a fine of "+fine+" CAD againt your account. If you have any queries please visit the emergency website.\n"
                        + "\n"
                        + "Thanks and Regards,\n"
                        + ""+orgName+"\n"
                        + ""+id+"\n"
                        + "\n"
                        + "If you have any concerns. Please contact us by +1 4375184224 or dheerajjayanth@gmail.com";
                        Properties p= new Properties();
                        p.put("mail.smtp.auth", "true");
                        p.put("mail.smtp.starttls.enable", "true");
                        p.put("mail.smtp.ssl.trust", "smtp.gmail.com");
                        p.put("mail.smtp.host", "smtp.gmail.com");
                        p.put("mail.smtp.port", "587");

                        Session s= Session.getDefaultInstance(p, new javax.mail.Authenticator(){
                            protected PasswordAuthentication getPasswordAuthentication(){
                                return new PasswordAuthentication("dheerajjayanth@gmail.com","rtowuvazupeivdmr");
                            }
                        });
                        try{
                            MimeMessage m = new MimeMessage(s);
                            m.setFrom(from);
                            m.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
                            m.setSubject(sub);
                            m.setText(content);
                            Transport.send(m);
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                          
                        
                        
                        
                        
                            
                            
                            JOptionPane.showMessageDialog(this,""+id1+" has been Rejected Successfully");
                            clear();
                            table();
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this,e);
                        }

                    }
            }
            }}
            }
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt4ActionPerformed
      public void box(){
         txt3.removeAllItems();  
         String orgName1="";
        try{
      Connection cn= db_connection.DatabaseConnector.getConnection(); 
      
     Statement st= cn.createStatement();
      String sql = "SELECT * FROM INCIDENT_EMPLOYEE_LOGIN";
      ResultSet ps= st.executeQuery(sql);
      

      Connection cn2= db_connection.DatabaseConnector.getConnection(); 
       Statement st2= cn2.createStatement();
      String sql2 = "select * from INCIDENT_OFFICER_LOGIN";
      ResultSet ps2= st2.executeQuery(sql2);
        while(ps2.next()){
       if(ps2.getString("OFFICERID").equalsIgnoreCase(id)){
          orgName1=ps2.getString("ORGANISATION_NAME");
      }
        }
      
       while(ps.next()){
       if(ps.getString("ORGANISATION_NAME").equalsIgnoreCase(orgName1)){
       txt3.addItem(ps.getString("EMPLOYEEID"));
       }
        }
      }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
      }
    
    }
      public void clear(){
          txt1.setIcon(null);
          txt2.setText("");
          txt4.setText("");
      }
    public void table(){
        DefaultTableModel tbl = (DefaultTableModel)table.getModel();
        tbl.setRowCount(0);
              try{
      Connection cn= db_connection.DatabaseConnector.getConnection();
 
        Statement st= cn.createStatement();
      String sql = "select * from INCIDENT_MANAGER";
      ResultSet ps= st.executeQuery(sql);

            while(ps.next()){

           Object[] row = new Object[20];
           if(orgName.matches(ps.getString("INCIDENT_TYPE"))){
          row[0]=ps.getString("USERID");
          row[1]=ps.getString("INCIDENT");
          row[2]=ps.getString("INCIDENT_ID");
          row[3]=ps.getString("INCIDENT_DATE");
          row[4]=ps.getString("INCIDENT_TYPE");
          row[5]=ps.getString("STREET");
          row[6]=ps.getString("CITY");
          row[7]=ps.getString("POSTAL_CODE");
          row[8]=ps.getString("PICTURE");
          row[9]=ps.getString("STATUS");
          row[10]=ps.getString("REFERRED");
          tbl.addRow(row);
            }
            }
       }catch(Exception e){
          JOptionPane.showMessageDialog(this,e);
}
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JLabel txt1;
    private javax.swing.JTextArea txt2;
    private javax.swing.JComboBox<String> txt3;
    private javax.swing.JTextField txt4;
    // End of variables declaration//GEN-END:variables
}
